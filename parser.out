Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    NUMERROR
    TOKENERROR
    WHITESPACE

Grammar

Rule 0     S' -> program
Rule 1     program -> macros classes
Rule 2     macros -> macros macro
Rule 3     macros -> <empty>
Rule 4     macro -> reference
Rule 5     reference -> REFERENCE STRING
Rule 6     classes -> classes class
Rule 7     classes -> <empty>
Rule 8     class -> CLASS ID LCB symbol_decs RCB
Rule 9     symbol_decs -> symbol_decs symbol_dec
Rule 10    symbol_decs -> <empty>
Rule 11    symbol_dec -> var_dec
Rule 12    symbol_dec -> func_dec
Rule 13    var_dec -> var_type var_list SEMICOLON
Rule 14    var_type -> return_type
Rule 15    var_type -> STATIC return_type
Rule 16    return_type -> INT_TYPE
Rule 17    return_type -> REAL_TYPE
Rule 18    return_type -> BOOL_TYPE
Rule 19    return_type -> STRING_TYPE
Rule 20    return_type -> ID
Rule 21    var_list -> var_list COMMA var_list_item
Rule 22    var_list -> var_list_item
Rule 23    var_list_item -> ID
Rule 24    var_list_item -> ID ASSIGNMENT exp
Rule 25    func_dec -> var_type func_body
Rule 26    func_dec -> VOID func_body
Rule 27    func_dec -> STATIC VOID func_body
Rule 28    func_body -> ID LP formal_arguments RP block
Rule 29    formal_arguments -> formal_arguments_list
Rule 30    formal_arguments -> <empty>
Rule 31    formal_arguments_list -> formal_arguments_list
Rule 32    formal_arguments_list -> formal_argument
Rule 33    formal_argument -> return_type ID
Rule 34    block -> LCB statements_list RCB
Rule 35    block -> statement
Rule 36    statements_list -> statements_list statement
Rule 37    statements_list -> <empty>
Rule 38    statement -> exp
Rule 39    statement -> assignment
Rule 40    statement -> PRINT
Rule 41    statement -> statement_var_dec
Rule 42    statement -> IF
Rule 43    statement -> FOR
Rule 44    statement -> WHILE
Rule 45    statement -> RETURN
Rule 46    statement -> BREAK
Rule 47    statement -> CONTINUE
Rule 48    assignment -> lvalue ASSIGNMENT exp SEMICOLON
Rule 49    lvalue -> ID
Rule 50    lvalue -> ID DOT ID
Rule 51    print -> PRINT LP STRING RP SEMICOLON
Rule 52    statement_var_dec -> return_type var_list SEMICOLON
Rule 53    if -> IF LP exp RP block elseif_blocks else_block
Rule 54    elseif_blocks -> elseifs
Rule 55    elseif_blocks -> <empty>
Rule 56    elseifs -> elseifs elseif
Rule 57    elseifs -> elseif
Rule 58    elseif -> ELSEIF LP exp RP block
Rule 59    else_block -> ELSE block
Rule 60    else_block -> <empty>
Rule 61    for -> FOR LP ID IN exp TO exp STEPS exp RP block
Rule 62    while -> WHILE LP exp RP block
Rule 63    return -> RETURN exp SEMICOLON
Rule 64    break -> BREAK SEMICOLON
Rule 65    continue -> CONTINUE SEMICOLON
Rule 66    exp -> INTEGER
Rule 67    exp -> REAL
Rule 68    exp -> TRUE
Rule 69    exp -> FALSE
Rule 70    exp -> STRING
Rule 71    exp -> 1value
Rule 72    exp -> binary_operation
Rule 73    exp -> logical_operation
Rule 74    exp -> comparison_operation
Rule 75    exp -> bitwise_operation
Rule 76    exp -> unary_operation
Rule 77    exp -> LP exp RP
Rule 78    exp -> function_call
Rule 79    binary_operation -> exp ADDITION exp
Rule 80    binary_operation -> exp SUBTRACTION exp
Rule 81    binary_operation -> exp MULTIPLICATION exp
Rule 82    binary_operation -> exp DIVISION exp
Rule 83    binary_operation -> exp MODULO exp
Rule 84    binary_operation -> exp POWER exp
Rule 85    binary_operation -> exp SHIFT_LEFT exp
Rule 86    binary_operation -> exp SHIFT_RIGHT exp
Rule 87    logical_operation -> exp AND exp
Rule 88    logical_operation -> exp OR exp
Rule 89    comparison_operation -> exp LT exp
Rule 90    comparison_operation -> exp LE exp
Rule 91    comparison_operation -> exp GT exp
Rule 92    comparison_operation -> exp GE exp
Rule 93    comparison_operation -> exp EQ exp
Rule 94    comparison_operation -> exp NE exp
Rule 95    bitwise_operation -> exp BITWISE_AND exp
Rule 96    bitwise_operation -> exp BITWISE_OR exp
Rule 97    unary_operation -> SUBTRACTION exp
Rule 98    unary_operation -> NOT exp
Rule 99    unary_operation -> BITWISE_NOT exp
Rule 100   function_call -> ID function_call_body
Rule 101   function_call -> ID DOT ID function_call_body
Rule 102   function_call_body -> LP actual_arguments RP
Rule 103   actual_arguments -> actual_argument_list
Rule 104   actual_arguments -> <empty>
Rule 105   actual_arguments_list -> actual_arguments_list COMMA exp
Rule 106   actual_arguments_list -> exp

Terminals, with rules where they appear

ADDITION             : 79
AND                  : 87
ASSIGNMENT           : 24 48
BITWISE_AND          : 95
BITWISE_NOT          : 99
BITWISE_OR           : 96
BOOL_TYPE            : 18
BREAK                : 46 64
CLASS                : 8
COMMA                : 21 105
COMMENT              : 
CONTINUE             : 47 65
DIVISION             : 82
DOT                  : 50 101
ELSE                 : 59
ELSEIF               : 58
EQ                   : 93
FALSE                : 69
FOR                  : 43 61
GE                   : 92
GT                   : 91
ID                   : 8 20 23 24 28 33 49 50 50 61 100 101 101
IF                   : 42 53
IN                   : 61
INTEGER              : 66
INT_TYPE             : 16
LCB                  : 8 34
LE                   : 90
LP                   : 28 51 53 58 61 62 77 102
LT                   : 89
MODULO               : 83
MULTIPLICATION       : 81
NE                   : 94
NOT                  : 98
NUMERROR             : 
OR                   : 88
POWER                : 84
PRINT                : 40 51
RCB                  : 8 34
REAL                 : 67
REAL_TYPE            : 17
REFERENCE            : 5
RETURN               : 45 63
RP                   : 28 51 53 58 61 62 77 102
SEMICOLON            : 13 48 51 52 63 64 65
SHIFT_LEFT           : 85
SHIFT_RIGHT          : 86
STATIC               : 15 27
STEPS                : 61
STRING               : 5 51 70
STRING_TYPE          : 19
SUBTRACTION          : 80 97
TO                   : 61
TOKENERROR           : 
TRUE                 : 68
VOID                 : 26 27
WHILE                : 44 62
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

1value               : 71
actual_argument_list : 103
actual_arguments     : 102
actual_arguments_list : 105
assignment           : 39
binary_operation     : 72
bitwise_operation    : 75
block                : 28 53 58 59 61 62
break                : 
class                : 6
classes              : 1 6
comparison_operation : 74
continue             : 
else_block           : 53
elseif               : 56 57
elseif_blocks        : 53
elseifs              : 54 56
exp                  : 24 38 48 53 58 61 61 61 62 63 77 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 98 99 105 106
for                  : 
formal_argument      : 32
formal_arguments     : 28
formal_arguments_list : 29 31
func_body            : 25 26 27
func_dec             : 12
function_call        : 78
function_call_body   : 100 101
if                   : 
logical_operation    : 73
lvalue               : 48
macro                : 2
macros               : 1 2
print                : 
program              : 0
reference            : 4
return               : 
return_type          : 14 15 33 52
statement            : 35 36
statement_var_dec    : 41
statements_list      : 34 36
symbol_dec           : 9
symbol_decs          : 8 9
unary_operation      : 76
var_dec              : 11
var_list             : 13 21 52
var_list_item        : 21 22
var_type             : 13 25
while                : 

